package it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.policy

import it.agilelab.provisioning.commons.client.ranger.model.{ Access, PolicyPriority, RangerPolicy, RangerPolicyItem }
import it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.RangerResources

object RangerPolicyGenerator {

  private val ComponentPolicyNamePattern = "%s_access_policy"
  private val S3Service                  = "cm_s3"
  private val S3ServiceType              = "S3"
  private val DefaultPolicyLabels        = Seq("autogenerated")

  def componentAccessPolicy(
    prefix: String,
    bucket: String,
    path: String,
    ownerRole: String,
    userRole: String,
    zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        S3Service,
        ComponentPolicyNamePattern.format(prefix),
        ComponentPolicyNamePattern.format(prefix),
        S3ServiceType,
        DefaultPolicyLabels,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.bucketAndPath(bucket, path),
        policyItems = ownerPolicyItems(ownerRole) ++ userPolicyItems(userRole),
        policyPriority = PolicyPriority.NORMAL
      )

  private def ownerPolicyItems(ownerRole: String): Seq[RangerPolicyItem] =
    Seq(
      RangerPolicyItem(
        roles = Seq(ownerRole),
        groups = Seq.empty,
        users = Seq.empty,
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.read,
          Access.write
        )
      )
    )

  private def userPolicyItems(userRole: String): Seq[RangerPolicyItem] =
    Seq(
      RangerPolicyItem(
        roles = Seq(userRole),
        groups = Seq.empty,
        users = Seq.empty,
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.read
        )
      )
    )

}
