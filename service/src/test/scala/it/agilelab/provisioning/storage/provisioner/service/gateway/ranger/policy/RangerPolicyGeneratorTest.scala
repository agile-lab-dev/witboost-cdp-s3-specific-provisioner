package it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.policy

import it.agilelab.provisioning.commons.client.ranger.model.{ Access, PolicyPriority, RangerPolicy, RangerPolicyItem }
import it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.RangerResources
import org.scalatest.funsuite.AnyFunSuite

class RangerPolicyGeneratorTest extends AnyFunSuite {

  test("componentAccessPolicy") {
    val actual   = RangerPolicyGenerator.componentAccessPolicy(
      prefix = "prefix1",
      bucket = "bucket1",
      path = "path1",
      ownerRole = "owner1",
      userRole = "userRole1",
      zoneName = "zoneName1"
    )
    val expected = RangerPolicy(
      id = -1,
      service = "cm_s3",
      name = "prefix1_access_policy",
      description = "prefix1_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.bucketAndPath("bucket1", "path1"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq("owner1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read,
            Access.write
          )
        ),
        RangerPolicyItem(
          roles = Seq("userRole1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read
          )
        )
      ),
      serviceType = "S3",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zoneName1",
      PolicyPriority.NORMAL
    )

    assert(actual == expected)
  }

}
