package it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.policy

import it.agilelab.provisioning.commons.client.ranger.RangerClient
import it.agilelab.provisioning.commons.client.ranger.model.{ Access, PolicyPriority, RangerPolicy, RangerPolicyItem }
import it.agilelab.provisioning.storage.provisioner.core.models.PolicyAttachment
import it.agilelab.provisioning.storage.provisioner.service.gateway.ranger.RangerResources
import org.scalamock.scalatest.MockFactory
import org.scalatest.funsuite.AnyFunSuite

class RangerPolicyGatewayTest extends AnyFunSuite with MockFactory {

  test("upsertOwnerPolicy updates existing policy") {
    val rangerClient = mock[RangerClient]
    val gateway      = new RangerPolicyGateway(
      rangerClient
    )

    val oldOwnerPolicyItems = Seq(
      RangerPolicyItem(
        roles = Seq("owner1"),
        groups = Seq.empty,
        users = Seq.empty,
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.read,
          Access.write
        )
      )
    )
    val oldUserPolicyItems  = Seq(
      RangerPolicyItem(
        roles = Seq("user1"),
        groups = Seq.empty,
        users = Seq.empty,
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.read
        )
      )
    )

    val newOwnerPolicyItems = oldOwnerPolicyItems.map(_.copy(roles = Seq("owner2")))
    val newUserPolicyItems  = oldUserPolicyItems.map(_.copy(roles = Seq("user2")))

    val componentAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_s3",
      name = "prefix1_access_policy",
      description = "prefix1_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.bucketAndPath("bucket1", "path1"),
      policyItems = oldOwnerPolicyItems ++ oldUserPolicyItems,
      serviceType = "S3",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zoneName1",
      PolicyPriority.NORMAL
    )

    (rangerClient.findPolicyByName _)
      .expects("cm_s3", "prefix1_access_policy", Some("zoneName1"))
      .once()
      .returns(Right(Some(componentAccessPolicy.copy(id = 144))))

    (rangerClient.updatePolicy _)
      .expects(componentAccessPolicy.copy(id = 144, policyItems = newOwnerPolicyItems ++ newUserPolicyItems))
      .once()
      .returns(Right(componentAccessPolicy.copy(id = 144, policyItems = newOwnerPolicyItems ++ newUserPolicyItems)))

    val actual = gateway.upsertComponentPolicy(
      "prefix1",
      "bucket1",
      "path1",
      "owner2",
      "user2",
      "zoneName1"
    )

    val expected = Right(PolicyAttachment("144", "prefix1_access_policy"))
    assert(actual == expected)
  }

  test("upsertComponentPolicy creates new policy") {
    val rangerClient = mock[RangerClient]
    val gateway      = new RangerPolicyGateway(
      rangerClient
    )

    val componentAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_s3",
      name = "prefix1_access_policy",
      description = "prefix1_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.bucketAndPath("bucket1", "path1"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq("owner1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read,
            Access.write
          )
        ),
        RangerPolicyItem(
          roles = Seq("user1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read
          )
        )
      ),
      serviceType = "S3",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zoneName1",
      PolicyPriority.NORMAL
    )

    (rangerClient.findPolicyByName _)
      .expects("cm_s3", "prefix1_access_policy", Some("zoneName1"))
      .once()
      .returns(Right(None))

    (rangerClient.createPolicy _)
      .expects(componentAccessPolicy)
      .once()
      .returns(Right(componentAccessPolicy.copy(id = 144)))

    val actual = gateway.upsertComponentPolicy(
      "prefix1",
      "bucket1",
      "path1",
      "owner1",
      "user1",
      "zoneName1"
    )

    val expected = Right(PolicyAttachment("144", "prefix1_access_policy"))
    assert(actual == expected)

  }

  test("deleteComponentPolicy delete existing policies") {
    val rangerClient = mock[RangerClient]
    val gateway      = new RangerPolicyGateway(
      rangerClient
    )

    val componentAccessPolicy = RangerPolicy(
      id = 111,
      service = "cm_s3",
      name = "prefix1_access_policy",
      description = "prefix1_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.bucketAndPath("bucket1", "path1"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq("owner1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read,
            Access.write
          )
        ),
        RangerPolicyItem(
          roles = Seq("user1"),
          groups = Seq.empty,
          users = Seq.empty,
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.read
          )
        )
      ),
      serviceType = "S3",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zoneName1",
      PolicyPriority.NORMAL
    )

    (rangerClient.findPolicyByName _)
      .expects("cm_s3", "prefix1_access_policy", Some("zoneName1"))
      .once()
      .returns(Right(Some(componentAccessPolicy)))

    (rangerClient.deletePolicy _)
      .expects(*)
      .once()
      .returns(Right())

    val actual = gateway.deleteComponentPolicy(
      "prefix1",
      "zoneName1"
    )

    val expected = Right(
      Seq(
        PolicyAttachment("111", "prefix1_access_policy")
      )
    )

    assert(actual == expected)
  }

  test("deleteComponentPolicy does not call deletePolicy method when policies are not existing") {
    val rangerClient = mock[RangerClient]
    val gateway      = new RangerPolicyGateway(
      rangerClient
    )

    (rangerClient.findPolicyByName _)
      .expects("cm_s3", "prefix1_access_policy", Some("zoneName1"))
      .once()
      .returns(Right(None))

    val actual = gateway.deleteComponentPolicy(
      "prefix1",
      "zoneName1"
    )

    val expected = Right(
      Seq.empty[PolicyAttachment]
    )

    assert(actual == expected)
  }

}
